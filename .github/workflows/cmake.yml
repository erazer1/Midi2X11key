name: CMake

on:
  push:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  ubuntu-latest:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    # previously fetched CPM from github, now provide with code
    # mkdir -p cmake
    # wget -O cmake/CPM.cmake https://github.com/cpm-cmake/CPM.cmake/releases/latest/download/get_cpm.cmake
    - name: Install Libs
      run: |
        sudo apt-get update
        sudo apt-get install libxdo-dev
        sudo apt-get install librtmidi-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MidiKey ubuntu-latest
        path: |
          build/MidiKey

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
    - name: Release Latest
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: Ubuntu Latest
        files: |
          build/MidiKey
          LICENSE
          README.md      

  ubuntu-20_04:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    permissions:
      contents: write
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3

    # previously fetched CPM from github, now provide with code
    # mkdir -p cmake
    # wget -O cmake/CPM.cmake https://github.com/cpm-cmake/CPM.cmake/releases/latest/download/get_cpm.cmake
    - name: Install Libs
      run: |
        sudo apt-get update
        sudo apt-get install libxdo-dev
        sudo apt-get install librtmidi-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MidiKey ubuntu-20.04
        path: |
          build/MidiKey

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
    - name: Release 20.04
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: Ubuntu 20.04
        files: |
          build/MidiKey
          LICENSE
          README.md
  release:
    needs: [ubuntu-latest, ubuntu-20_04]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download production artifacts
        uses: actions/download-artifact@v3
      - name: Display structure of downloaded files
        run: ls -R      
    
